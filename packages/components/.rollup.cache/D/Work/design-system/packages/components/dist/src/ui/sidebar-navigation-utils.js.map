{"version":3,"file":"sidebar-navigation-utils.js","sourceRoot":"","sources":["../../../src/ui/sidebar-navigation-utils.tsx"],"names":[],"mappings":"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","sourcesContent":["// packages/components/src/ui/sidebar-navigation-utils.tsx\r\n\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { LucideIcon } from \"lucide-react\";\r\n\r\nexport interface NavigationItem {\r\n  id: string;\r\n  label: string;\r\n  href?: string;\r\n  icon?: LucideIcon;\r\n  active?: boolean;\r\n  disabled?: boolean;\r\n  badge?: string | number;\r\n  subItems?: NavigationItem[];\r\n}\r\n\r\nexport interface NavigationSection {\r\n  id: string;\r\n  title: string;\r\n  icon?: LucideIcon;\r\n  items: NavigationItem[];\r\n  defaultOpen?: boolean;\r\n}\r\n\r\nexport interface NavigationConfig {\r\n  sections: NavigationSection[];\r\n  standalone?: NavigationItem[];\r\n}\r\n\r\n// Hook for URL-based active state detection\r\nexport function useActiveNavigation(\r\n  currentPath?: string,\r\n  matchMode: \"exact\" | \"startsWith\" = \"startsWith\"\r\n) {\r\n  const isActive = React.useCallback(\r\n    (href?: string) => {\r\n      if (!href || !currentPath) return false;\r\n\r\n      if (matchMode === \"exact\") {\r\n        return currentPath === href;\r\n      }\r\n\r\n      return currentPath.startsWith(href);\r\n    },\r\n    [currentPath, matchMode]\r\n  );\r\n\r\n  const findActiveItem = React.useCallback(\r\n    (config: NavigationConfig): string | null => {\r\n      // Check standalone items\r\n      if (config.standalone) {\r\n        for (const item of config.standalone) {\r\n          if (isActive(item.href)) return item.id;\r\n        }\r\n      }\r\n\r\n      // Check section items\r\n      for (const section of config.sections) {\r\n        for (const item of section.items) {\r\n          if (isActive(item.href)) return item.id;\r\n\r\n          // Check sub-items\r\n          if (item.subItems) {\r\n            for (const subItem of item.subItems) {\r\n              if (isActive(subItem.href)) return subItem.id;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n    [isActive]\r\n  );\r\n\r\n  return { isActive, findActiveItem };\r\n}\r\n\r\n// Hook for navigation state management\r\nexport function useNavigationState(\r\n  config: NavigationConfig,\r\n  currentPath?: string\r\n) {\r\n  const { isActive, findActiveItem } = useActiveNavigation(currentPath);\r\n  const [expandedSections, setExpandedSections] = React.useState<string[]>(\r\n    () => {\r\n      // Auto-expand sections that contain active items\r\n      const expanded: string[] = [];\r\n\r\n      if (currentPath) {\r\n        config.sections.forEach((section) => {\r\n          const hasActiveItem = section.items.some(\r\n            (item) =>\r\n              isActive(item.href) ||\r\n              item.subItems?.some((subItem) => isActive(subItem.href))\r\n          );\r\n\r\n          if (hasActiveItem || section.defaultOpen) {\r\n            expanded.push(section.id);\r\n          }\r\n        });\r\n      } else {\r\n        // Default open sections\r\n        config.sections.forEach((section) => {\r\n          if (section.defaultOpen) {\r\n            expanded.push(section.id);\r\n          }\r\n        });\r\n      }\r\n\r\n      return expanded;\r\n    }\r\n  );\r\n\r\n  const activeItemId = React.useMemo(\r\n    () => findActiveItem(config),\r\n    [config, findActiveItem]\r\n  );\r\n\r\n  const toggleSection = React.useCallback((sectionId: string) => {\r\n    setExpandedSections((prev) =>\r\n      prev.includes(sectionId)\r\n        ? prev.filter((id) => id !== sectionId)\r\n        : [...prev, sectionId]\r\n    );\r\n  }, []);\r\n\r\n  const isSectionExpanded = React.useCallback(\r\n    (sectionId: string) => expandedSections.includes(sectionId),\r\n    [expandedSections]\r\n  );\r\n\r\n  return {\r\n    activeItemId,\r\n    expandedSections,\r\n    toggleSection,\r\n    isSectionExpanded,\r\n    isActive,\r\n  };\r\n}\r\n"]}